@using DATN.Application.Dtos.TestSetDtos
@using DATN.Application.Dtos.ListeningDtos
@using DATN.Application.Dtos.ReadingDtos
@model DoTestSetDto

@{
    ViewData["Title"] = "Làm đề thi";
    var isListening = Model.listeningQuestions != null && Model.listeningQuestions.Any();
    var questions = isListening ? Model.listeningQuestions.Cast<object>().ToList() : Model.readingQuestions.Cast<object>().ToList();

    int totalTimeInSeconds = isListening
        ? (questions.Count * 30) + 10
        : (int)(questions.Count * 1.4 * 60);

    Layout = null;

    var userName = ViewData["UserName"] as string ?? "Khách";
    var userAvatar = ViewData["UserAvatar"] as string;
}

<!-- Bootstrap CDN -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<!-- Custom Styles -->
<style>
    body {
        background: linear-gradient(to right, #ff9a9e, #fad0c4, #fbc2eb, #a18cd1);
        background-size: 400% 400%;
        animation: gradientBG 15s ease infinite;
        min-height: 100vh;
    }

    @@keyframes gradientBG {
        0% {background-position: 0% 50%;}
        50% {background-position: 100% 50%;}
        100% {background-position: 0% 50%;}
    }

    .header-card {
        background: #fff;
        border-left: 8px solid #d63384;
    }

    .badge.bg-primary {
        background-color: #a18cd1 !important;
    }

    .badge.bg-warning {
        background-color: #ffb3c1 !important;
        color: #6c757d !important;
    }

    .badge.bg-info {
        background-color: #e0aaff !important;
    }

    #countdown {
        font-size: 1.1rem;
        font-weight: 600;
        background-color: #d63384;
        color: #fff;
        padding: 6px 18px;
        border-radius: 30px;
        box-shadow: 0 0 10px rgba(214, 51, 132, 0.5);
    }

    .card-header {
        background-color: #a18cd1;
        color: white;
    }

    .btn-submit {
        background-color: #d63384;
        border: none;
    }

    .btn-submit:hover {
        background-color: #a61e57;
    }

    .form-check-input:checked {
        background-color: #d63384;
        border-color: #d63384;
    }

    .question-number {
        font-size: 1.2rem;
    }

    .form-check-label img {
        max-height: 200px;
        width: 100%;
        object-fit: contain;
        border: 2px solid #dee2e6;
        border-radius: 10px;
    }

    .avatar {
        width: 40px;
        height: 40px;
        object-fit: cover;
    }

    .container {
        max-width: 960px;
    }
</style>

<div class="container my-5">
    <!-- Header -->
    <div class="header-card rounded p-4 shadow-sm mb-4 d-flex justify-content-between align-items-center flex-wrap">
        <div>
            <h2 class="mb-1 text-uppercase text-dark">@Model.TestName</h2>
            <p class="mb-1"><strong>Ngày tạo:</strong> @Model.CreatedDate.ToString("dd/MM/yyyy")</p>
            <p class="mb-1"><strong>Mức độ:</strong> <span class="badge bg-primary">@Model.RankQuestionName</span></p>
            <p class="mb-1">
                <strong>Đánh giá trung bình:</strong>
                <span class="badge bg-warning">@Model.AvgRating.ToString("0.0") <i class="bi bi-star-fill"></i></span>
            </p>
        </div>
        <div class="text-end">
            <div><strong>Tổng câu hỏi:</strong> <span class="badge bg-info text-dark">@questions.Count</span></div>
            <div class="mt-2"><span id="countdown">Đang tính thời gian...</span></div>
            <div class="mt-3 d-flex align-items-center justify-content-end">
                @if (!string.IsNullOrEmpty(userAvatar))
                {
                    <img src="@userAvatar" alt="Avatar" class="rounded-circle me-2 avatar" />
                }
                <span class="fw-semibold">@userName</span>
            </div>
        </div>
    </div>

    <!-- Form -->
    <form method="post" asp-action="SubmitTest" asp-controller="Exam" id="examForm">
        <input type="hidden" name="TestId" value="@Model.Id" />

        @for (int i = 0; i < questions.Count; i++)
        {
            <div class="card mb-4 shadow-sm border-0">
                <div class="card-header">
                    <span class="question-number">Câu hỏi @((i + 1))</span>
                </div>
                <div class="card-body bg-white">
                    @if (isListening)
                    {
                        var q = (ListeningQuestionForTestDto)questions[i];
                        <p class="fw-semibold">@Html.Raw(q.Question)</p>
                        <audio controls class="w-100 mb-3">
                            <source src="@q.ListeningSoundURL" type="audio/mpeg" />
                            Trình duyệt không hỗ trợ audio.
                        </audio>
                        <div class="row">
                            @for (int j = 0; j < q.ListeningAnswers.Count; j++)
                            {
                                var ans = q.ListeningAnswers[j];
                                bool isImage = !string.IsNullOrEmpty(ans.Content) &&
                                (ans.Content.StartsWith("http") && (
                                ans.Content.EndsWith(".jpg") ||
                                ans.Content.EndsWith(".jpeg") ||
                                ans.Content.EndsWith(".png") ||
                                ans.Content.Contains("cloudinary.com")
                                ));

                                <div class="@(isImage ? "col-md-6" : "col-12") mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="Answers[@i].SelectedAnswerId" value="@ans.Id" id="listen_@ans.Id" />
                                        <label class="form-check-label d-block" for="listen_@ans.Id">
                                            @if (isImage)
                                            {
                                                <img src="@ans.Content" alt="Đáp án dạng ảnh" />
                                            }
                                            else
                                            {
                                                @ans.Content
                                            }
                                        </label>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        var q = (ReadingQuestionForTestDto)questions[i];
                        <p class="fw-semibold">@Html.Raw(q.Question)</p>
                        @if (!string.IsNullOrEmpty(q.ReadingImageURL))
                        {
                            <img src="@q.ReadingImageURL" class="img-fluid rounded mb-3" alt="Reading Image" />
                        }
                        @foreach (var ans in q.ReadingAnswers)
                        {
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="radio" name="Answers[@i].SelectedAnswerId" value="@ans.Id" id="read_@ans.Id" />
                                <label class="form-check-label" for="read_@ans.Id">@ans.Content</label>
                            </div>
                        }
                    }

                    <input type="hidden" name="Answers[@i].QuestionIndex" value="@i" />
                </div>
            </div>
        }

        <div class="text-center mt-5">
            <!-- Nút nộp bài thủ công -->
            <button type="button" id="submitBtn" class="btn btn-success btn-lg px-5">📝 Nộp bài</button>

        </div>
    </form>
</div>

<!-- SweetAlert2 CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- Countdown Script -->
<script>
    let timeLeft = @totalTimeInSeconds;
    const countdown = document.getElementById("countdown");

    function updateCountdown() {
        let minutes = Math.floor(timeLeft / 60);
        let seconds = timeLeft % 60;
        countdown.textContent = `Thời gian còn lại: ${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

        if (timeLeft <= 0) {
            clearInterval(timer);
            Swal.fire({
                title: '⏰ Hết thời gian!',
                text: 'Bài làm của bạn sẽ được nộp ngay bây giờ.',
                icon: 'warning',
                confirmButtonText: 'OK',
                confirmButtonColor: '#d63384',
                allowOutsideClick: false,
                allowEscapeKey: false
            }).then(() => {
                document.getElementById("examForm").submit();
            });
        }


        timeLeft--;
    }

    updateCountdown();
    const timer = setInterval(updateCountdown, 1000);
</script>
<script>
    document.getElementById("submitBtn").addEventListener("click", function () {
        Swal.fire({
            title: 'Xác nhận nộp bài?',
            text: 'Bạn chắc chắn muốn nộp bài ngay bây giờ chứ?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: '✅ Nộp bài',
            cancelButtonText: '❌ Hủy',
            confirmButtonColor: '#d63384',
            cancelButtonColor: '#6c757d'
        }).then((result) => {
            if (result.isConfirmed) {
                document.getElementById("examForm").submit();
            }
        });
    });
</script>

